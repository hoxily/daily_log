工作记录2016-10-11

先尝试一下暴力搜索，看看耗时情况如何。
此处的暴力搜索基于昨天写的给定两个同类型的卡牌，判断是否能相连函数来做。
1。 对所有卡牌按照类型进行分组；
2。对每一组，组内两两成组一共有 C(n,2) = n * (n-1) /2种组合。需要对这些所有组合进行是否能相连判定
很黄很暴力。

NGUI的UICamera如果同时勾选useMouse和useTouch，会使得UIButtonMessage的Click事件变为两份。导致第一个事件选中，第二个事件又取消选中。

不要使用2.0.45版本的iTween的easeType.punch插值函数。会报NullReferenceException。换其他的插值类型吧。

连接路径的提示线条太丑。需要美化。另外，由于不是最优路径，搜出来的路径有时候拉得老长，相当难看。

不是很方便构造死局状态。但是我又想测一测出现死局时，死局检测函数的耗时。那么先简单地把所有的TestConnectable函数都当作返回false，先测完所有的组合可能性。看一下这样子的耗时情况。

我曹，完全不能忍。20x10的格子，全部的组合情况遍历搜一遍，需要1分钟21秒。还得看CPU性能。我去。而项目设计里最大是8x8的格局，耗时是7秒多。完全不行啊。必须得想办法加速。

初始化时如果完全随机生成，那么就不能保证有解。这时引入死局判定，判定成功后意味着再初始化一遍。如果运气差，那么就有可能陷入死循环中。耗费大量时间在初始化局面上。

但是可以采用程序作弊的方式，半固定加半随机的方式来生成局面。
1。选取某个固定的样式，里面有绝对可以配对的局部格局。比如1x2的小局部，强制使它的两个图案为同类型，余下其他地方采用随机方式进行排列。
2。或者，先完全随机生成一个初始局。然后在这个初始局里随机决定一个格子，再随机决定该格子的四个相邻格子强制同类型（也就是被选中的第二个格子里的图案如果不是匹配图案类型，那么就去当前初始局面里找一与被选中的第一个格子类型相同但不是第一个格子的图案与被选中的第二个格子交换）。

网上搜了一下连连看相连性判定算法。其中有一种算法是分类讨论的方式。不知道效率如何。

发现了一个搜索bug，不该连通的，被判定成了连通。我擦。要怎么调？