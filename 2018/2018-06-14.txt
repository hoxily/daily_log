2018年06月14日，星期四，多云，22~31摄氏度，杭州滨江

TODO：
* 把配置文件提到StreamingAssets文件夹里。以方便变动。否则Unity导出xcode工程后，才发现配置有问题，又得耗费大量时间。
* 杭州麻将的商城需要升级，使用新的接口以及流程。目前服务器临时兼容了一下老代码逻辑。
* 忽略麻将的杀进程断线重连。HomePageCtrl里对GetReloginUserInfo做了屏蔽处理。实现后，需要解开屏蔽。
* 由于资源不允许存在于非叶子节点的文件夹下，所以移动了一些资源。需要调整相应的Resources.Load语句。
* AssetBundle模拟Resources.Load接口。
* AssetBundle资源热更新。
* heart_beat协议里加一个玩家状态异常字段，用于强制踢人。
* 某些iPhone手机进游戏房间后黑屏bug。
* 自动跟注按钮的2个状态UI有调整。除了光圈旋转，还有打勾。具体见脑海中的设计图。
* 1.0.3bug反馈，见在线表格。
----

需要一个工程相关配置以及资源文件复制管理的机制。现在打包出来的android包，applicationId都不对。无法唤起微信。

发现了一个昨晚加班到凌晨1点时写的代码的bug。由于是复制的iOS打AssetBundle包的代码。其中的MenuItem改了，OutputDirectory也改了。唯独BuildTarget没改过来。造成加载出来的spine特效等物体丢失了shader。果然容易出错呢。

----

发现了一个Unity文档的bug：
https://docs.unity3d.com/ScriptReference/PlayerSettings.SetIconsForTargetGroup.html

// Dynamic created icons are not packaged to apk files.
// This document should clarify this issue and add warning about this.
// 动态创建的Texture2D数组无法用作图标。完全没有打包进apk文件里面。
// 文档应该注明此函数所接受的Texture2D来源要求，告知API使用者。
private static void SetPlayerSettings()
{
        PlayerSettings.SetIconsForTargetGroup(context.buildTargetGroup, CreateIcons(context));
}

/// <summary>
/// 创建图标
/// </summary>
/// <param name="context">构建过程上下文信息</param>
/// <returns></returns>
public static Texture2D[] CreateIcons(PlayerBuildContext context)
{
    // 这样子创建的icon组不可用。无效。打出来的apk包里面并没有指定的图标。
    // 怀疑unity内部使用了类似AssetDatabase.GetAssetPath的方法，获取存储于磁盘上的图标文件。
    // 由于是动态生成的，仅存在于内存中，所以根本不可能找得到。
    var allSizes = PlayerSettings.GetIconSizesForTargetGroup(context.buildTargetGroup);
    Debug.Log("Count of all Icons: " + allSizes.Length);
    List<Texture2D> result = new List<Texture2D>();
    bool mipmap = false;
    Texture2D originalIcon = context.settings.applicationIcon;
    foreach (var size in allSizes)
    {
        Texture2D icon = new Texture2D(size, size, TextureFormat.ARGB32, mipmap);
        for (int x = 0; x < icon.width; x++)
        {
            for (int y = 0; y < icon.height; y++)
            {
                float u = (float)x / (float)icon.width;
                float v = (float)y / (float)icon.height;
                Color color = originalIcon.GetPixelBilinear(u, v);
                icon.SetPixel(x, y, color);
            }
        }
        icon.Apply();

        //File.WriteAllBytes(ProjectPath + "/build/" + size + ".png", icon.EncodeToPNG());

        result.Add(icon);
    }
    return result.ToArray();
}