2019年09月06日, 星期五, GPS(30.3111, 120.0898)

昨晚回家发现喵喵竟然把青青放在地上的黑色垃圾袋连同里面的板栗壳一起搬到床上去了。令人感动。

发现把空的饮料瓶放在桌面上，会被保洁阿姨收掉。看起来得往里面装点水才行。

如何保证异步任务的正确性？开启异步任务后如何取消？UnityWebRequest含有Abort方法，可以提前终止数据下载。排队、取消前一个任务、规定同一时刻只能执行一个异步任务借助loading遮罩来限制用户操作。
取消异步下载任务还得确保File之类的对象即时释放。

想了一下刚刚所谓的快速点击面料列表中的面料，直接取消前面的ChangeFabric任务，这只能适用于选中的材质没变的情况下。如果针对10个材质，每个都开启1个ChangeFabric任务，这时是不应该取消前面的ChangeFabric任务的。

这是不冲突的任务，理论上可以并行。但是会大大增加复杂性。

再考虑另一种情况，Drop面料所针对的板片级别的材质与点击面料所针对的材质级别，有可能存在包含关系。针对这两者的ChangeFabric操作，应该是取消排在前的任务。但是两者的(选中材质,目标面料)二元组并不一样，按照简单逻辑来判断应该是并行任务。

如果允许并行任务，那么在ChangeFabric与ChangeComponent并行的情况下，会遇到ChangeFabric所针对的作用目标已消失的情况。

----

有个放大镜功能。网页端已经实现了。但是在Unity端稍微有一点不一样。尝试使用复制出来的Camera，调整rect来定位可见区域，发现很难调整。于是改为RenderTexture来做。一开始想了很久，在缩放倍数这里有一些问题。实际我想复杂了。不用管相机的size缩放倍数与RenderTexture跟屏幕的尺寸之间的缩放倍，会相互抵消。其实不用考虑抵消的问题。只需要在意被放大选区占屏幕的大小（应该是以高为准），决定出magnifierCamera的size，然后使用要求的放大倍数计算出RenderTexture的尺寸。假设选区在设计图中的高度占画面比例为h，那么RenderTexture的高度也就是 h * ScreenHeight * Scale。
