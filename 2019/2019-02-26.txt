2019-02-26

结合Profiler测试发现，造成卡顿的真正原因是WWW.texture属性。unity scripting手册上说明该属性每读取一次就会重新从加载的byte[]数据生成一个新的Texture2D。
而 yield return www;操作并不会造成卡顿，仅仅是加载到内存而已。造成卡顿的是从byte[]转换成Texture2D对象的时候。
写个如下的循环，
for (int i = 0; i < 10; i++) {
    Texture2D tex = www.texture;
}
可以发现GC.Alloc是单次访问www.texture的10倍。耗时也接近10倍。

使用ILSpy反编译UnityEngine.dll可以发现，WWW.texture属性实现，是使用了UnityEngine.ImageConversion.LoadImage(this Texture2D tex, byte[] data, bool markNonReadable)方法。
GC.Alloc和耗时都应该这个函数的锅。

另外一点，在Profiler里可以看到Log输出也非常耗时，可以在Release包里把log输出关闭。

Unity提供了DownloadHandlerTexture类，可以把加载操作放到主线程之外，大概可以不卡住主线程吧。经过Profiler调试可以发现，DownloadHandlerTexture不会阻塞主线程。提升效果明显。