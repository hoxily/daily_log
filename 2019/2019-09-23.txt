2019年09月23日, 星期一, GPS(30.3111, 120.0898)

遇到一个dracodec_unity.dll解析数据失败的例子。尝试从源代码里查看出问题的原因。

仔细想了一下，网页端都没有问题，既然都是同一套代码，那么问题应该在别的地方。

尝试把Decrypt解密代码注释掉，会发现28个Mesh都解析失败。错误码是-1，在源代码里的含义是GetEncodedGeometryType方法获取GeometryType失败，相当于文件头损坏。所以理应就是需要这个解密字节数据的过程。如果保留Decrypt解密过程，那么只会有一个材质名叫XXXZ下标为3的material有问题。

翻看返回-3错误码的代码片段，发现里面调用了其他函数，并且这些函数都喜欢用 #ifdef 宏定义包裹一些特性。如果在编译的时候，不开启这些特性，那么当然返回的Status不ok。所以怀疑是编译dll时，某些特性的开关没有打开，而这个特性正好是该draco网格数据里含有的。

启用Visual studio 调试这个损坏的文件，会发现没有通过src\draco\compression\mesh\mesh_edgebreaker_decoder_impl.cc 的DecodeConnectivity函数里的max_encoded_faces检查。

把这个max_encoded_faces校验的代码注释掉，竟然可以一路往下走！也没报内存访问异常。

看看这个obj文件放进unity里长什么样子。

在unity里完全看不见这个物体。

----

骆立康使用更高级的3D模型查看工具发现这个XXXZ是一个对服装表现无贡献的脏数据。那么，需要在Unity里识别到这样子的Mesh，并将它剔除掉。看看还会不会在西装衣袖上显示脏东西。

----

由于数据结构过于复杂，短时间内仅实现了一个各SubMesh独立挂在GameObject上的实现。发现竟然没有奇怪的黑影。在不使用CombinedMesh的情况下，该款式渲染正常。看起来是CombinedMesh不支持空的Mesh？

得想办法跳过这些空的Mesh。
