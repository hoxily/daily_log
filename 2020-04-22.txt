2020年04月22日，星期三，杭州，多云转阴，11~19摄氏度

怎么衡量升级计划的工作量呢？首先要明确恢复哪些功能。如果仅从面料供应商的功能上来看，其实它反而包含了款式详情页的功能。

可否考虑先屏蔽款式详情功能？屏蔽的话，需要RN端做相应处理，主要就是屏蔽入口。毕竟款式详情页的左侧TAB功能预计未来也使用ReactNative重写，方便扩展复杂的搜索功能。

我先把现有的功能在iPad上截图统计一下。然后跟负责人确认哪些功能可以延后。还得跟全贺菁确认UI调整、屏蔽调整、新protocol的变化。也许还得统计一下Lt3D.ts里提供的接口，确认一下可能需要用到的接口？

与RN的protocol肯定需要更新。但是还有一个更重要的问题，那就libwebgl是js兼容的库，是相同语言的API级别的调用。但是对于RN和Unity通信来说，很多async，callback，function return value这种基本功能都没有。RN与Unity通信相当于全都是异步的函数调用。完全照抄Lt3D.ts完全不合适。可能还是得像过去写的那么多XXXDetail页面的控制器那样，会有很多冗余的代码。简单地说就是是否让RN直接操纵Unity里的3D对象，跟RN通过XXXDetail控制器间接地操控3D对象。

由于存在TShow、动态布料这种相对独立的场景，直接操纵3D对象好像不太合适。如果是场景级别的粒度，重复性的代码就偏多了。

尝试使用百度搜索了下源于Flutter的UIWidgets库，感觉可能会比Unity与RN之间的跨语言消息通信效率高一些。但是UIWidgets可能会带来更大的坑，还是算了吧。那么只能避免for循环级别的Unity与RN交互，也就会导致一部分业务逻辑写在Unity端，也就是RN端仅做偏杂UI列表、筛选、相对独立的信息面板的工作。涉及逐帧的交互的时候，不可能用SendMessage方式来回调用，也就只能在Unity端实现了。换个思路，那些逐帧更新的交互操作是否能降低更新频率，变成一个低频次的动作？就像网页端以前drag&drop印绣花时，并不是在drag过程中就已经贴上去并持续跟踪鼠标位置，而是知道drop那一刻才贴上去。

----

lib_webgl项目本地测试，就跟react native的npm命令差不多。“npm run dev”即可在本地开启一个服务器，进行测试。

很奇怪。更新到最新的master，package.json里依赖的draco3d项是一个http远程git仓库。下载不下来。
