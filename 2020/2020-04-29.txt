2020年04月29日，星期三，杭州，晴，17~30摄氏度

iPad端需求评审 2020-04-29
需求点：图标风格与PC统一。
UI设计困难点：整体调整，需要排期，大约2星期。
快速变通方案：图标下追加名字。

功能入口调整。
放大镜调整。

----

在抄ChangeRawFabric的时候，看到_fabric.selected[0]这个代码感觉很可能出bug。原因就是这个函数是一个async的函数。如果这个函数没有执行完毕前，又做了其他操作，那么就可能会引起_fabric_selected列表的内容发生变化，从而有可能导致根本取不到索引号为0的元素。

所以必须在Unity的Controller级别进行异步函数调用的控制。如果仅仅排队的话，某些操作指令是依赖当时的模型状态和视角状态，比如Drop类指令。一旦排队延迟，显然跟用户当初drop的目标发生冲突。难不成异步函数执行期间，禁止所有用户交互？（全民飞机大战的网络类请求确实会阻塞用户交互输入）

这就很麻烦了。前一个操作的影响一直持续到异步函数结束。

用户发过来的Command指令不再具有稳定性。

另一个潜在的bug就是函数重入引起了竞争。某些具有唯一性的对象，被分步骤的多个异步函数进行操作，其状态将不可控。举例来说，某个异步函数使用foreach迭代一个集合，每一步都是需要等待的步骤。如果再开一个新的调用，就会出现同时在这个集合上进行foreach迭代的情况。然后，如果这个异步函数不是只读的，而是可能会修改这个集合，那么两个同时在执行的异步调用显然会发生冲突。

可以在收到指令时，收集当前状态下的需要的位置、对象等数据。这样的话接下来轮到该指令执行时，使用的是记录下来的状态。需要额外判断那些对象和状态是否还有效。
