2020年11月24日，星期二，杭州

最近一直在下雨。

lib_webgl项目使用了一个插件来规范代码的缩进。插件的名字叫 prettier，可以在Visual Studio Code的插件商店里找到。

它的使用方式是安装并启用后，设置Visual Studio Code的默认的formatter为此插件。即在settings.json里添加如下配置项：

"editor.defaultFormatter": "esbenp.prettier-vscode"

在lib_webgl项目中新建一个ts或者js文件，使用Format Document指令来调用prettier。这时就会自动应用2格空格缩进等其他格式。状态栏里的Prettier就会打上勾。只要格式化过一遍，并关闭重新打开，Visual Studio Code就会自动识别此文件的缩进。

prettier会根据当前所要格式化的文件所在路径，一步步往上找，找到项目根目录下的prettier.config.js时就会应用那里面配置的格式化方案。

注意：VSCode创建的全新的js或者ts文件，默认是采用的4空格缩进，也就是VSCode的编辑器默认配置。prettier并不能接管这里。所以需要在写若干行代码之后，使用Format Document功能调用prettier。

----

刚才脑子突然灵光一闪，投影印花的实现方式好像突然就猜到了。大概就是把世界空间下的三角面投影到投影空间里，把投影空间看作一个压扁的平面的话（类似相机的投影），再把这个平面看作一个由平面印花构成的长方形。于是把待筛选的三角面投到这个长方形上，这些三角面的3D空间的顶点位置保持不变，但是其UV坐标则采用此印花构成的长方形，反向还原回去就是空间中的投影印花了。需要处理三角面与此长方形边界相交的裁剪问题。

按照这个思路，裁出来的三角面应该是不会出现不能跨版片投影的bug的。这些版片本来就属于一个LtMesh啊，来自同一个co文件。连UV都是我根据投影坐标在投影长方形上的位置计算出来的UV，根据不在乎原始模型的UV啊。奇怪了。
