2020年11月25日，星期三，杭州

所以这就解释了为什么网上的文章和DynamicDecals都使用一个立方体来框选投影范围。因为这个立方体正是类似相机可视区域的视锥体。

BUG描述里所谓的跨版问题，其实对应于代码里创建DecalGeometry只传入了单个LtMesh的问题。说白了，根本就不支持多个Component构成的模型贴投影印花。

我的内眼能察觉到公司办公室的灯光的频闪。感觉很不舒服。正比当初在杨文鹏家，很明显地感受到他家天花板上的灯的频闪。如果打开手机的摄像机，并开启慢动作模式，可以非常明显地看到拍到的画面一直在闪烁。

简单过了一遍LtDecalGeometry，将js改写为ts，并添加上帮助理解的中文注释。

将LtDecalGeometry理顺，知晓decalSize里的x，y，z的含义分别是什么，就能扩展成从多个LtMesh构造投影印花的方案了。如此一来也就实现了跨LtCloth的投影印花。

遇到了一个typescript的坑。它不支持简单地在A Class里引用B Class的function，引用的function里面的this指针指向不正确了。所以使用了一个变通的方法，把要调用的函数包装成一个interface，interface里声明了方法原型，让Class A持有这个interface对象即可。

在typescript声明方法原型可以用如下的语法：

interface IExample {
    getIntersectedClothes: (sphere: Sphere) => LtCloth[];
}

在这里，IExample接口声明了一个名叫getIntersectedClothes的函数，这个函数接收一个Sphere类型的参数，返回LtCloth数组。
