2020年12月18日，星期五，杭州

下雨了。很冷。

使用SSE4指令集优化双线性插值图像缩放：https://www.xuebuyuan.com/1106339.html

除了里面的内联汇编代码，还有解说文字。里面提到计算权重时，将小数部分乘以16384并取整，即放大14位，这里采用整数计算而不是浮点计算。所以QImage缩放代码里的左移14位与右移14等操作，就是类似的操作？

Qt的QImage用的不是内联汇编，而是称之为compiler intrinsics的函数，编译器内建函数。 https://docs.microsoft.com/en-us/cpp/intrinsics/compiler-intrinsics?view=msvc-160 

“如果一个函数是内建的，那么通常此函数的代码会直接内联嵌入，避免函数调用开销，并允许为此函数生成高效的机器指令。一个内建的函数通常快于等价的内联汇编代码，因为优化器知道有多少个内建函数，因此某些优化就可以用得上，而内联汇编却不行。除此之外，优化器能根据上下文和调用时的参数的不同，在内建函数展开、缓冲区对齐以及其他调整上作出对应的变化。”

写了一个图像缩放基本原理的文章，为进一步解读QImage平滑缩放算法打下基础。http://3d.linctex.com:58090/pages/viewpage.action?pageId=34080032

拉着磊哥审阅了一下我移植的TextureScale.ts，现在还有两个问题需要解决：
1. 验证输入宽高、输出宽高的极限值，即有效范围，可以通过确保函数调用的过程中没有溢出来做；
2. 尝试阅读QImage源代码里提到的Imlib2库的源代码或算法说明，搞明白它的利用位运算做定点数的原理、xapoints、yapoints在downScale的情况下的使用原理；

阿里云OSS缩放PNG图边缘杂色问题，客服给出了回复结果。可以在resize时加上一个type_6的参数，缩放就不会有杂色边缘了。参见钉钉平台3D组的截图。
如此一来，就可以避免下载过大的OSS图片，由OSS来做POT大小的mipmap0.结省流量和时间。自己仅做AlphaBleeding与mipmaps生成。
