2021年03月02日，星期二，杭州

现在的改动没有边界限制，为了实现需求，可以一直深入到我看不懂的地方之上，但是理应有边界。

为了验证新的换色算法确实应用上去了。在Style3D Fabric软件里拿那张40MiB的png图片测试了下，发现Color（换色）方式相比Multiply（叠加）的最大优势是颜色替换非常彻底。替换后的颜色不会像Multiply那样含有杂色，最多能看到黑灰色。不过也有一个很明显的缺陷，相同的色调和饱和度但是亮度不同的颜色，换色效果都是差不多的，看不太出来差别。有点像是只要换成某个色调的颜色，亮度和饱和度就总是达到最大值的感觉。另外Multiply方式呈现黑色的情况，在Color模式下可以正常换掉颜色。

测试时发现旧的褪色+换色算法与新的平均颜色+换色效果看起来差不多。那么它的优势在哪儿？也许是不需要改动原始纹理，也就是不需要记录两份纹理。而仅仅记录原始纹理的平均颜色值即可。可以省下很多内存。但是在shader计算里就变复杂了。

很奇怪。已经使用Color模式在lib_webgl项目进行计算了。但是跟Style3D Fabric对比会发现，lib_webgl里的Color换色实现，测试用例里的蓝色色调去不掉，并没有替换成选择的紫红色。

询问田唐昊得知，Style3D 和 Style3D Fabric软件还在使用老的算法。所以跟语雀文档上的效果不一样。相当于在Style3D软件里，即使“褪色”没有勾选，做换色的时候依然会计算出褪色后的纹理。

不久田唐昊给了一个灰度化加强版的计算方法。将平均颜色转换成灰度颜色，同样的原始纹理的采样出来的颜色也转换成灰度颜色，保持目标颜色为彩色，这样子代入计算，得出的最终结果没有了明显的蓝色色调。原来呈现蓝色色调的地方变成了偏暗的目标颜色。
