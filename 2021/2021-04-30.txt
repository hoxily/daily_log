2021年04月30日，星期五，杭州

我想到了一个处理uv三角形坐标超出[0,1]的办法了。

1. 首先找出uv三角形的AABB包围盒；
2. 将包围盒使用对齐到整数坐标的1x1大小的格子进行切分；
3. 分别绘制这uv三角形在这些格子上的结果；
4. 将所有格子的绘制结果进行叠加，得到一个最终的1x1大小格子，即最终的遮罩纹理；

适用条件是包围盒特别小的情况。

而且这个办法能应对非常极端的情况，使用fract会出问题的情况。（说白了，就是fract或者clamp都是有问题的。必须使用上面逐个格子绘制并叠加的办法。）

给定uv三角形PQR, P=(0, 0), Q=(0, 0.5), R=(-0.75, 0.5),
这时使用fract函数做处理，根据 https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/fract.xhtml 文档上的描述，字面意思是取小数部分。但是最后的Description里说，实际计算过程为
x - floor(x)
那么经过fract变换后，P'=(0, 0), Q=(0, 0.5), R=(0.25, 0.5)，显然这样子取到的覆盖像素范围要比实际覆盖范围小得多。

----

我可能找到钮扣纹理损坏的原因了。

geometryJson.materialId = material.uuid; // 材质uuid做key
...
//材质
if (!materialJsons.hasOwnProperty(geometryJson.materialId)) {
  ...
}

它跳过了已经处理过的material。几何数据不同，引用同一个材质纹理，但是对于BakingTextureBackgroundPeeling处理来说，会造成纹理不全。
材质在几何间共享了。但是剔除白底时没有提供共享了此材质全部几何数据，从而造成的错误。

----

针对同一个材质被多个几何体共享的情况下，在首次创建此材质时抓取了所有用了该材质的BufferGeometry，并传入计算。结果得出的遮罩纹理并没有发生变化，依然是抠出洞的样子。

罗元雷从平台的3D渲染图上分析，可能是uvSize导致的缩放。一缩放，被我挖空的透明区域就显示出来了。而uvSize又是根据几何数据计算出来的。说明这些BufferGeometry的index与uv一致，但是其他的attribute可能有差异。导致两个袖口的8个钮扣显示正常，但是胸口的钮扣显示出问题。
